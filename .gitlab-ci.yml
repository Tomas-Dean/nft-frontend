image: node:16-alpine

stages:
  - build
  - deploy
  - notify

### DEV ENVIRONMENT
build_dev:
  stage: build

  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules

  when: manual
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

  before_script:
    - cat "$DOT_ENV_DEV" > "$(pwd)/.env"
    - apk add --no-cache git
  script:
    - npm install --legacy-peer-deps
    - CI=false NODE_OPTIONS=--max-old-space-size=4096 npm run build
  artifacts:
    paths:
      - ./build
    untracked: false
    expire_in: 1 day

deploy_S3_dev:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

  rules:
    - if: $CI_COMMIT_BRANCH == "main"

  needs:
    - build_dev

  services:
    - docker:dind

  script:
    - aws --version
    - aws s3 sync --delete ./build s3://$S3_BUCKET_DEV
    - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID_DEV --paths '/*'

### DESIGN ENVIRONMENT
build_dev_design:
  stage: build

  cache:
    - key:
        files:
          - package-lock.json
      paths:
        - node_modules

  rules:
    - if: $CI_COMMIT_BRANCH == "design"

  before_script:
    - cat "$DOT_ENV_DEV" > "$(pwd)/.env"
    - apk add --no-cache git
  script:
    - npm install --legacy-peer-deps
    - CI=false NODE_OPTIONS=--max-old-space-size=4096 npm run build
  artifacts:
    paths:
      - ./build
    untracked: false
    expire_in: 1 day

deploy_S3_design:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "design"

  needs:
    - build_dev_design

  services:
    - docker:dind

  script:
    - aws --version
    - aws s3 sync --delete ./build s3://$S3_BUCKET_DEV_DESIGN
    - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID_DEV_DESIGN --paths '/*'
    - sh .scripts/telegram-notify.sh ✅

notify_error:
  stage: notify
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - sh .scripts/telegram-notify.sh ❌
  when: on_failure
### PROD ENVIRONMENT
# build_production:
#   stage: build

#   when: manual
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"

#   before_script:
#     - cat "$DOT_ENV_PROD" > "$(pwd)/.env"
#     - apk add --no-cache git
#   script:
#     - npm install --legacy-peer-deps
#     - CI=false npm run build
#   artifacts:
#     paths:
#       - ./build
#     untracked: false
#     expire_in: 1 day

# deploy_S3_prod:
#   stage: deploy
#   image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"

#   needs:
#     - build_production

#   services:
#     - docker:dind

#   script:
#     - aws --version
#     - aws s3 sync --delete ./build s3://$S3_BUCKET_PROD
#     - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID_PROD --paths '/*'

